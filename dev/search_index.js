var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GenomicCoordinates","category":"page"},{"location":"#GenomicCoordinates","page":"Home","title":"GenomicCoordinates","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GenomicCoordinates.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GenomicCoordinates]","category":"page"},{"location":"#GenomicCoordinates.GenomicInterval","page":"Home","title":"GenomicCoordinates.GenomicInterval","text":"GenomicInterval{C,P}\n\nA genomic interval.\n\n\n\n\n\n","category":"type"},{"location":"#GenomicCoordinates.GenomicInterval-Union{Tuple{P}, Tuple{Any, P, P}} where P<:Integer","page":"Home","title":"GenomicCoordinates.GenomicInterval","text":"GenomicInterval(chr, first::P, last::P)\n\nCreate a GenomicInterval with chromosome chr, start position first, and end position last.\n\n\n\n\n\n","category":"method"},{"location":"#GenomicCoordinates.GenomicPosition","page":"Home","title":"GenomicCoordinates.GenomicPosition","text":"GenomicPosition{C,P}\n\nA genomic position.\n\n\n\n\n\n","category":"type"},{"location":"#GenomicCoordinates.chr2int-Tuple{AbstractString}","page":"Home","title":"GenomicCoordinates.chr2int","text":"chr2int(chr)::Int\n\nConvert a chromosome name to an integer.\n\n\n\n\n\n","category":"method"},{"location":"#GenomicCoordinates.compare_for_inclusion_1in2-Union{Tuple{T2}, Tuple{T1}, Tuple{Intervals.Interval{T1, Intervals.Closed, Intervals.Closed}, Intervals.Interval{T2, Intervals.Closed, Intervals.Closed}}} where {T1, T2}","page":"Home","title":"GenomicCoordinates.compare_for_inclusion_1in2","text":"compare_for_inclusion_1in2(i1::Interval, i2::Interval)\n\nCompare two intervals for inclusion. Returns -2 if i1 is before i2, 2 if i1 is after i2, -1 if i1 partially overlaps i2 at the beginning, 1 if i1 partially overlaps i2 at the end, and 0 if i1 is inside i2.\n\n\n\n\n\n","category":"method"},{"location":"#GenomicCoordinates.compare_for_inclusion_2in1-Union{Tuple{T2}, Tuple{T1}, Tuple{Intervals.Interval{T1, Intervals.Closed, Intervals.Closed}, Intervals.Interval{T2, Intervals.Closed, Intervals.Closed}}} where {T1, T2}","page":"Home","title":"GenomicCoordinates.compare_for_inclusion_2in1","text":"compare_for_inclusion_2in1(i1::Interval, i2::Interval)\n\nCompare two intervals for inclusion. Returns -2 if i1 is before i2, 2 if i1 is after i2, -1 if i2 partially overlaps i1 at the beginning, 1 if i2 partially overlaps i1 at the end, and 0 if i2 is inside i1.\n\n\n\n\n\n","category":"method"},{"location":"#GenomicCoordinates.compare_for_overlap-Union{Tuple{T2}, Tuple{T1}, Tuple{Intervals.Interval{T1, Intervals.Closed, Intervals.Closed}, Intervals.Interval{T2, Intervals.Closed, Intervals.Closed}}} where {T1, T2}","page":"Home","title":"GenomicCoordinates.compare_for_overlap","text":"compare_for_overlap(i1::Interval, i2::Interval)\n\nCompare two intervals for overlap. Returns -1 if i1 is before i2,  1 if i1 is after i2, and 0 if they overlap.\n\n\n\n\n\n","category":"method"},{"location":"#GenomicCoordinates.find_intersections","page":"Home","title":"GenomicCoordinates.find_intersections","text":"find_intersections(x, y, compare=compare_for_overlap)\n\nFind intersections between two arrays of intervals. The compare function is used to compare two intervals. The default is compare_for_overlap.\n\nReturns an array of arrays, where the i-th element contains the indices of intervals in y that intersect with the i-th interval in x.\n\nThe intervals in x and y do not need to be sorted. However the function will sort them internally, so for repeated calls it is more efficient to sort  them before calling this function.\n\n\n\n\n\n","category":"function"},{"location":"#GenomicCoordinates.segment_length-Union{Tuple{Intervals.Interval{GenomicPosition{C, P}, L, R}}, Tuple{R}, Tuple{L}, Tuple{P}, Tuple{C}} where {C, P, L, R}","page":"Home","title":"GenomicCoordinates.segment_length","text":"segment_length(a::GenomicInterval{C,P})\n\nReturn the length of the genomic segment a.\n\n\n\n\n\n","category":"method"}]
}
